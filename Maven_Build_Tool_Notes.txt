============
Build Tools
============

-> Build tools are used to automate project or application  build process


                ->build process means complile source code of project and excute test goal and down load dependecies and package project as jar or war and upload artifact into repository 
				
	  			a) Compile The Source Code
				b) Download Required Dependencies (Ex: springboot, hibernate, junit, log4j, kafka...)
				c) Execute Unit Test Cases (JUnits)
				d) Package our application as jar / war


		JAR  ---> Java Archieve  ---> It is package format for java standalone application
	
		WAR  ---> Web Archieve ---> It is package format for java web applications


-> Instead of doing the above build steps manually, we can take the help of Build Tools to automate that process.

-> We have below build tools for java applications

			1) Ant   (Outdated)
			2) Maven
			3) Gradle

===========
Maven
===========

-> Maven is a free and open source software given by Apache Organization

-> Maven s/w is developed using Java programming language

-> Maven is used to perform Build Automation for java projects

-> Maven is called as Java Build Tool

Note: Maven is used as a build tool for  java projects only.
      To work with maven  should be installed in system

========================
What we can do using maven
========================

1) We can create initial project folder structure using maven

2) We can download "project dependencies" using maven
    (ex : springboot, hibernate, kafka, redis, email, log4j, junit, security...)

-> To develop one java project we will use several frameworks like spring, hibernate etc along with Java

-> We need to download those frameworks and we should  add to our java project

-> These frameworks we are using in our project are called as our project dependencies

-> Instead of we are downloading dependencies, we can tell to maven s/w to download dependencies

NOTE : Dependecy Means Liabraries That Are Required For Our Project Developemnt is Called Depenedecies.
NOTE :  POM Stands For Project Object Model Where We Configure Our Maven Project depenedecies. 

Note: Required dependencies we will add in "pom.xml" file then maven s/w will download them

-> pom stands for project object model

-> When we create maven project then pom.xml file will be created automatically

-> pom.xml will act as input file for maven software

3) We can compile project source code using maven

4) We can package java project as jar or war file using maven

======================
Maven Installation
======================

1) Download and install Java software

-> When we install java we will below 2 things

		a) JDK (Java Development Kit) 

		b) JRE (Java Runtime Environment)

-> JDK contains set of tools to develop java programs

-> JRE contains platform/environment which is used to run java programs

Link To Download Java : https://www.oracle.com/in/java/technologies/javase/javase8-archive-downloads.html

2) Set JAVA_HOME in Environment Variables (System Env Variables)

			User Environment Variables: Specific to particular account which logged in our PC

			System Envrionment Variables : For All Accounts

Note: Environment Variables will be used by operating system

			JAVA_HOME = C:\Program Files\Java\jdk1.8.0_202

3) Set Path for JAVA (Go to System Env Variables -> Env Variables -> System Variables -> Select Path and Click on Edit then add JDK path like below)

			Path = C:\Program Files\Java\jdk1.8.0_202\bin

4) Verify Java installation by executing below command in "Command Prompt"

			> java -version

Note: It should dipslay java version which we have installed

5) Download Maven software from Apache website

		Link To download Maven : https://maven.apache.org/download.cgi
		File Name : 	apache-maven-3.8.5-bin.zip (Binary Archive)

6) Extract Maven Zip file -> Copy extracted maven folder and paste it in "C" drive

7) Set MAVEN_HOME in System Environment Variables

		MAVEN_HOME = C:\apache-maven-3.8.5

8) Set Path for Maven in System Environment Variables

		Path : C:\apache-maven-3.8.5\bin

9) Open Command Prompt and verify Maven Installaton using below command

		> mvn -version


============= 
     MAVEN
=============
Maven is a project build tool developed by apache organization.
->Maven is used to automate the build process of java projects.
->Maven is developed in java language.

What Maven Can Do?
* Create Project folder structure like src/main and src/test
*Download the required dependencies(spring .hibernate,secuirty.. etc)
*Add dependencies to project  build path(mavne dependencies in project folder structure ) 
*Complie the project source code
*Excute the project test classes and cases
*package the project as a jar or war file based on archetyepe we have mentiioned while creating java mavne project
 
======================
Maven Terminology
======================
archetype
groupId
artifactId
packaging
version


-> Archteype represents what type of project we want to create
	
		=> maven-archetype-quickstart : It represents java standalone application

		=> maven-archetype-webapp : It represents java web application

Note: Maven providing 1500+ archetypes

-> groupId represents company name or project name

-> artifactId represents project name or project module name

-> packaging represents how we want to package our java application (jar or war)
     jar => qucikstart : standalone application
     war => webapp:  Web Application

-> version represents project version

		SNAPSHOT : Under development
		RELEASE : Development completed (Production)


============================================
Creating stand-alone application using maven
============================================

1) Create one folder for maven practise 

2) Open Command prompt from that folder

3) Execute below command to create maven project


>> mvn archetype:generate -DgroupId=in.ashokit -DartifactId=01-Maven-App -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

4) Once project created then verify project folder structure

			01-Maven-App
				- src
					- main
						-java

					- test
						-java

				- pom.xml


		src/main/java : Application source code (.java files)

		src/test/java : Application Unit Test code (.java files)

		pom.xml : Project Object Model (Maven configuration file)

5) We can add dependencies in pom.xml file

6) We can find maven dependencies in www.mvnrepository.com website

7) Add below dependency in pom.xml file

	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-core</artifactId>
		<version>5.3.23</version>
	</dependency>

8) Execute maven goal

		> mvn compile

============================================
How maven will download dependencies
============================================
Repository: Repository means a place where all jars or liabraries  will be stored

-> In Maven we have 3 types of repositories

1) Central Repository

2) Remote Repository

3) Local Repository

-> central repository is maintaining by apache organization where project related liabraries will be available

-> every company will maintain their own remote repository (Ex: Nexus, JFrog)
    company specific jars will be maintain in remote repository

-> Local repository will be created in our local system with .m2(Location : C://users/<uname>/.m2)
    Note: when we create maven project in our local machine, then maven will create .m2 fiile local repository in machine 

Note:When we add dependecy first time maven will download the jars from central to local repositoty.


-> When we add dependency in pom.xml, maven will search for that dependency in local repository. If it is available it will add to project build path.

-> If dependency not available in local repository then maven will connect to Central Repository or Remote Repository based on our configuration.

Note: By default maven will connect with central repository. If we want to use remote reposiotry then we need to configure remote repository details.


Note: Every software company will maintain their own remote repositories (Ex: Nexus / JFrog)
Nexus or Jfrog will maintain company related remote repositories.

Note: when we add depency in pom.xml maven will searches depenency first in  local repository and if dependency not available not available there it will local reposioryt then seaches in central repository and configured 
into project build path  

=================================
Configuring Remote Repository
=================================

add required remote repository dependency details  in pom.xml of maven project under dependencies section
                                           <dependency>
			<groupId>com.jrpt.learning</groupId>
			<artifactId>pwd-utils</artifactId>
			<version>1.0</version>
		     </dependency>
and add remote repositories details in pom.xml above dependencies tag.
<repositories>
        <repository>
            <id>nexus</id>
            <url>http://43.205.146.33:8081/repositry/jrpt/</url>
        </repository>     
</repositories>

Note: after adding remote repository details please excute mavne clean PACKAGE goal to see whether dependecies are downloading from remote repo i.e nexus  or not

Note:REMOTE REPOSITORY details will be given by DevOps teams	

Steps to connect java maven project  to remote repository by following:
1.we made changes in pom.xml maven project i.e remote repository details like remote repositry id and url and dependecy of remote repository
      <repositories>
		 <repository>
			 <id>nexus</id>
			 <url>http://43.205.146.33:8081/repositry/jrpt</url>
		 </repository>
	 </repositories>
   Note : repositories tag always placed above dependencies tag  
        <dependency>
			<groupId>com.jrpt.learning</groupId>
			<artifactId>pwd-utils</artifactId>
			<version>1.0</version>
		</dependency>   
2.changes made in settings.xml file of apache maven app installation folder  i.e where our maven downloaded and installed  manually in our system like C:\apache-maven-3.9.6\conf\seetings file
    ->In settings file we configure remote repository details and remote repository credentials also
   Note: By using credentials and urls we able to connect maven remote repository to download the dependecies and jar files.  	
       
	   #in settings.xml file under servers tag we mentioned credentials detaisl about nexus remote server
	   
	   <servers>
	       <server>
             <id>deploymentRepo</id>
             <username>repouser</username>
             <password>repopwd</password>
           </server>
       </servers>
   
      #under mirrors tag we mentioned remote repository url details
	  <mirrors>
	  
	  <mirror>
      <id>maven-default-http-blocker</id>
      <mirrorOf>external:http:*</mirrorOf>
      <name>Pseudo repository to mirror external repositories initially using HTTP.</name>
      <url>http://0.0.0.0/</url>
      <blocked>false</blocked>
    </mirror>
  </mirrors>
  
  Note:under mirror tag keep replace remote repository server url 
 
  Note:after compilation of above steps please execute mvn clean package it will show from jar will be downloading 
  
  REAL TIME : comapany will give us settings.xml file where we get information about remote repository details and credentials , so we have to replace  local system maven setting.xml with comapny provided settings.xml in order to connect with remote repository
  settings.xml file will be available in maven conf directory
  
===========
Maven Goals
===========
-> Goals are used to perform maven project  build process

clean
compile
test
package
install

-> clean goal is used to delete target folder

-> compile goal is used to compile project source code. Compiled code will be stored in target folder i.e .class files 

						compile
				.java ------------> .class

-> test goal is used to execute unit test code of our application (junit code)

-> package goal is used to generate jar or war file for our application based on packaging type available in pom.xml file.
    package goal internally does 3 goals i.e complie and test and package goals.

Note: jar or war file will be created in target folder.

-> install goal is used to install our maven  project i.e jar or war file  in maven local repository.(/m2)
   By Install Goal we can  upload or install our packaged jar or file of project in local reposoitory  for a back up process.
   
  Install:: complie + test + package + Install
  
  Install is the top most goal in the maven
  
  Note: In real time we upload our project jar or war file into artifact server  or nexus server or jfrog server
  *Configuration to upload or install our project in maven Remote Repository
    ->first we need to write confgiuration details of remote reposiotry i.e nexus or jfrog in pom.xml like below
     
     <distributionManagement>
		<repository>
			<id>nexus</id>
			<name>Releases Nexus Repo</name>
			<url>httP://13.233:8081/repository/release</url>
		</repository>
		<snapshotRepository>
			<id>nexus</id>
			<name>Snapshot Nexus Repo </name>
			<url>httP://13.233:8081/repository/snapshot</url>
		</snapshotRepository>
	</distributionManagement>	 
 Note: Based on our prject developement process i.e if project under developemnt we choose snapshot repository details  or if project developemnt completed we configure remote repository details in pom.xml     	  
  
    
Note: Every maven goal is associated with maven plugin. When we execute maven goal then respective maven plugin will execute to perform the operation.

NOTE : Every Maven Goal is having mavne plugin to perform operation 

Syntax : mvn  <goal-name>

Note: We need to execute maven goals from project folder

->we can excute goals from IDE also
-> when we excute package goal it internally excutes compile and test and package, so we can exclued the test goal from package goal by selecting skip test option in IDE while excuring package goal.

Noter : Project jar or war file is called artifact 
=================================
Creating web application using maven
=================================
>> mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=in.ashokit -DartifactId=flipkart_app -DinteractiveMode=false


===================================================
Working with Maven Using IDE (STS / Eclipse
================================================

-> Every IDE will have Maven plugin by default (no need to install)

-> Using IDE we can create maven project directley

-> Create Standalone project using IDE   (quick-start archetype)

-> Create Web application using IDE (web-app archetype)

-> Right Click on Project -> Build Path -> Configure Build Path -> Libraries -> Select JRE -> Edit -> Configure JDK

Note: If JDK not displaying, then add JDK using 'Installed-JRES' button  (we have to select jdk folder from our Program Files where we have installed java)

Note: For web application we need to add 'servlet-api' dependency in pom.xml

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>

-> Right click on Project -> Run As -> Maven Build -> Enter Maven Goals (Ex: clean package)


=========================
Maven Dependency  Exclusion
=========================
-> Exclusion is used to remove un-wanted child dependencies from build path which came from trastive dependecy

->Removing unused or unwanted dependecies from class path of project i.e pom.xml

->In Transitive Dependency Management(Downloading dependent dependencies to the  project build path) maven download dependent dependencies also with this 
  approach we have advantage and disadvantage like if we add spring context dependency maven will download it depenedent dependecies also like core,aop,beans etc so with this we do less configurations
  but this we have disadvatage also like  we didn't used aop jars in as development of project so when we complie the project jvm will load developed .class files and project build path jars files 
  .clsss so it's lead to occupie more space in jvm metaspace leads to outOfMemory
  ->in order to remove unused dependecies from project we have use maven exclusion dependecy in order to save the space in jvm
  
Note:It's developer responsibilty to exclude unused dependencies from pom.xml to save jvm memory otherwise it unused dependencies occupies memory spcae in jvm which leads outOfMemory
-> By exclusion tag we can exclude the unused dependecies from build path of project


-> Exclusion is used to remove un-wanted child dependencies from build path which came from trastive dependecy

Ex:  When we add 'spring-context' we are getting other dependencies also like 'spring-core', 'spring-beans', 'spring-aop' etc..

-> I want to use 'spring-context' but i don't want 'spring-aop' in build path then we can exclude 'spring-aop' from 'spring-context' like below

	     <dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.23</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-aop</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-expression<artifactId>
				</exclusion>
			</exclusions>
		</dependency>


===================================
Maven Multi  - Module Project
==================================
Maven Multi Module Project means trying to create parent project with sub projects.
-> Creating a projects with parent-child relationship is called Maven Multi Module Project

->we have a requirement of develop a E-commerce app, in e-commerce application we have several requirements like Products Module, payment Module,User module etc.
  In order to develope all those modules in single project becomes very difficult, so we use Mavne Multi-Module project to develope requirements in
   differen maven projecct like   Products maven child projecct , payment maven child projecct,User maven child projecct etc. 
   
-> along with child prokects we keep parent project where we keep common dependecies that aren required in child projects 

->By this Maven Multi  - Module Project Approach our projects maiantains becomes very easy.  

->In Maven Multi  - Module Project Approach when we Execute a Maven Goal on parent project  that will execute in child projects also 

-> A project contains collection of Modules like below

			1) User Module
			2) Admin Module
			3) Reports Module
			4)Tracking Module
			5) Payment Module
			6) Products Module etc....

-> It is not recommended to develop all the modules code in single project. Maintenence will become very difficult

-> To simplify the development we will use 'Maven-Multi-Module' concept

-> In Maven Multi Module, We will create project with Parent - Child relation

-> One Parent Project can have multiple child projects

-> Child Projects are called as 'Maven Modules'

-> When we execute Maven Goal in Parent Project then it will execute that goal in all the child projects also.

Note: Parent Project Packaging type should be 'POM'
      Child Project Packaging type as jar or war based on our requirement.
	 
Note: when we want to  creat child projects doesn't create it as  project, create it as a moodule of parent project.
      every child prject consider as a module of parent project 
	  
Note : Child Projects are called modules in maven project	  
	  
	  
================================================================================================================
Creating Maven Multi Module Project in IDE
==============================================
--- Parent-Project ---
1) Create Maven Project with Packaging Type as 'pom'

--- child project ---
2) Right Click on the Parent Project -> New -> Select Others -> Search For Maven Module -> Create the Module

3) After Module got created, check parent project pom.xml and child project pom.xml

Note: we see parent project info in child module pom.xml and child module infom in parent project pom.xml
      so child projects reffering info we see in parent project pom.xml
	  
	  ----parent project pom.xml----
	  
	  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.parent</groupId>
  <artifactId>Maven_Parent_Project</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <modules>
  	<module>Orders</module>
  	<module>payments</module>
  </modules>
 </project>
 
 ----child module pom.xml----
 order pom.xml:
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.parent</groupId>
    <artifactId>Maven_Parent_Project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <groupId>com.order</groupId>
  <artifactId>Orders</artifactId>
</project>


Payment pom.xml:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.parent</groupId>
    <artifactId>Maven_Parent_Project</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <groupId>com.payments</groupId>
  <artifactId>payments</artifactId>
</project>

Note:By this approach we can easilly separate the project in multiple modules 

	  

===========================================
Parent Project pom.xml looks like below
==========================================
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.flipkart</groupId>
	<artifactId>Flipkart_App</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>

	<modules>
		<module>ADMIN</module>
		<module>REPORTS</module>
	</modules>

</project>

=========================================
Child Project pom.xml looks like below
==========================================
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.flipkart</groupId>
    <artifactId>Flipkart_App</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>REPORTS</artifactId>
</project>


-> Right click on Parent Project -> Run as -> Maven Build -> Enter Goals and Execute.

==========================================
What is Dependency Scope in the Maven
==========================================

-> 'Scope' represents when specific dependecy should be used by Maven in Build Process

->Scope represents when  maven  to  load dependecies to build path.

->Like we have spring dependecies and hibernate dependecy and junit dependecy etc,so in that dependencies we junit dependecy should execute when we run test goal not duirng developement
  in order to reduce the burden on jvm to load all jars while compliling or runtime  code we define scope to dependency, so here we keep junit scope to test not as runtime 
  
  Note: Which dependecy we want to use at which phase i.e runtime or compile or test that can be defined by scope 
  Note: dependecy scopes is used to sepcify when maven should load dependecies  to buld path.
 
  

There are 6 scopes:

compile : This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects.

provided : This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope provided because the web container provides those classes. A dependency with this scope is added to the classpath used for compilation and test, but not the runtime classpath. It is not transitive.

runtime : This scope indicates that the dependency is not required for compilation, but is for execution. Maven includes a dependency with this scope in the runtime and test classpaths, but not the compile classpath.

test : This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases. This scope is not transitive. Typically this scope is used for test libraries such as JUnit and Mockito. It is also used for non-test libraries such as Apache Commons IO if those libraries are used in unit tests (src/test/java) but not in the model code (src/main/java).

system: This scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository.

import : This scope is only supported on a dependency of type pom in the <dependencyManagement> section. It indicates the dependency is to be replaced with the effective list of dependencies in the specified POM's <dependencyManagement> section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency.

----------------------------------------------------OR---------------------------------------------------------------------------------------

test: when maven executing test goal or test phase maven should load dependecies to build path

compile: when maven project is compliling then only dependecies should load to build path

runtime: when project is in running mode then only maven load the dependecies to build path

provided: during maven project is compiling maven should load the dependecies to build path but during running of project don't load the dependecies like servelet dependecncies load compile time but during running of project tomcat will prooivide that servelt dependecy then we use PROVIDED scope

system:when mavne project load the dependecies from sytem directories build path then we use system scope

==============================
What we have learnt in Maven
==============================

1) What is Build Tool
2) Why we need Build Tool
3) What is Maven
4) Maven Setup in Windows OS ( JAVA_HOME, JAVA PATH, MAVEN_HOME, MAVEN PATH)
5) Maven Terminology
6) Standalone Application Creation using Command Prompt & IDE
7) Web Application Creation using Command Prompt & IDE
8) Maven pom.xml file
9) How to add dependencies in 'pom.xml' file  (www.mvnrepository.com)
10) Maven Goals Execution in command prompt & in IDE
11) Maven Repositories (local, remote, central)
12) Working with Remote Repository (Ex: Nexus)
13) Maven Dependency Exclusion
14) Maven Multi Module Project
15) Maven Dependency Scopes


Note : Maven is a project build tool which is used to create project and downloading dependencies and complie and package and testing the project.





















