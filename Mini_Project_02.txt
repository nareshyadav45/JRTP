
---------------------Develope Office Team Portal Or Company Portal For Managing Enquiries Of Users-----------------------------

====================================================================================================================================

->To develop any project in company, company will give MockUp Screens i.e Dummy Screens to develop the project basen on the mockup screens, development develope the Project.

->McokUp Screens does not have the functionality , pages will open functionality doesn't work.MockUp Screens just they are Dummy Screens.

Project Functionalities:
------------------------
1. Home Page With Caurosel(Images Should be Rotate or Move Slide By Slide)

2.Sign Up 

3.Unlock Account

4.Sign In or Log in (Only Unlocked Users Can Login)

5.DashBoard (logged In Users Performance Report)

6.Add Enquiry

7.View Enquiry

8.Edit Or Update Enquiry(Only Logged In User Enquiries Can Update not others Users)

9.LogOut

Note : When User Logged in, only logged in user performance report should be displayed in dashboard and only logged in user added queries should be displayed in View Enquiries not others usersn queries.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
There are mainly two Activities Available in this project
----------------------------------------------------

Front Office Team : registration/unlock/dashboard/forgot password

Student enquiries : Add Enquiries/View Enquiries/Edit Enquiries.

Note : this project is mainly for front office team members of institue to register and unlock the account and login and view dashboard where team member performnace and forgot pwd functionality.
       Once login successfully they can add and view and edit the student enquiries.





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Execution Flow:
----------------
1.User  Will open web site home page 
        
		 ->Logo Dispaly With Nav Bar
		 ->Carousel(Banners or Images Slidiing)
		 ->Course Images Display
		 ->Login Button
		 
2.User Registration

         ->Unique Email Validation(Multiple Users Can't sign up with Same Email Id)		 
         ->Temperory Pwd should be generated by app
		 ->Send Registration Mail with temporary pwd with link to unlock the account.
	
    Note : Once Mail Sent, User will unlock the account.
	       Unlock link will be used for one time only, once we click on unlock link  it can't be opened for second time.  

3.UnLock Account :
                
		 ->Temporary Pwd Validation 
         ->Set New Password
         ->Unlock Account

	Note : User Should Unlock Accout Only One Time. If user try to unlock account second time application should display message as "Your Account Already Unlocked"
    Note : When the password is updated , then account will be unlocked and status will be changed to unlock.
4.Login Functionality:

         ->Unlocked Users Only Can Login
         ->Invalid Credentails Check(error : Invalid Credentails )
         ->Account Status Check if User Login with temporary pwd(Error : Your Account Locked)
         -> Login Success : Dispaly the Dashboard with Logged in user performance Report. 		 

5.Forgot Password :
    
	     ->InValid Email : No Account Found With  Given Mail Id
		 ->Valid Email    : Get the password from DB and send pwd to user mail.
		 
  Note: In Real Time Mock Screens Will be Provided by Functional Team.  		 
		 

6. Dashboard :

         -> Display logged in user performnace report 
		 -> How many enquiries of students added by logged in user and  out of those added enquiries how many are enrolled and how many are lost those kind of details should be displayed in dashboard.
		 
7.Add Enquiry :
		      
		 -> Add the enquiries of students with status as NEW 
         
8.View Enquiries :
     
         -> Display enquiries which are added by Logged in user.
         ->Edit Enquiry to update the status of enquiry which are added, based on enquiry status logged in  user performance report  will be mainatained in  dashboard.
         ->Filter the enquiries based on the given criteria.

9. LogOut:

         ->When User Click On LogOut display the home page. 


Note : Mock Screens Means Dummy Project.
		 
Note : As a developer first thing we need to learn is 'Analysis'.         		 
		 
Note : Based on Tables we take Entity classes, one table = one entity.

Note : For Evey Table we take One Entity and For Every Entity we take One Repository Interface.

Note : per page we take one controller or per module we take one controller.
       if project is big and complex we take one controller for one page.
       if project is small we take one controller for one module.
	   
Note : There are two types of Data Base tables in application.

       1.Static Tables : application is not responsible to create and read and update and delete the data.
	   
       2.Non-Static Tables : application is responsible to add and update and delete the data from db 	

Note : we can call static tables as Non Transactional Tables 
       Not static Table as Transactional Tables.
	   
1.Transactional Tables :
-----------------------
->Insert/update/delete/retrive those operations will be done by us using Application


2.Non Transactional Tables:
-----------------------------
->Retrive operation can be done us using application.Insert and update and delete operations can't be done by us or application.
->Application will not insert or delete or update the data , application is reponsible to retrieve the data.

Note : We can insert the data into static tables by writting insert queries(Manully) or we can insert the data using runner class(runner class will execute when ever applications started or restarted)
                             

Project SetUp:
---------------
1.Create Project With Required Dependencies

              a.web-starter
			  b.mail-starter
			  c.data-jpa
			  d.mysql-driver
			  e.validation starter
			  e.project lombok
			  f.devtools
			  g.thymeleaf-starter.
			  
2.Create Datasource and SMTP properties in application.properties file.       

3.Create Entity classes and Repositories.

4.Create FormBinding classes 

5.create helper or utility classes.

6.create response bean classes.

7.Create service interface and impl classes.

8.Create Excepetion Handler classes.

9.create controller classes with methods to handle the request and response. 

10.create runner class.

Note : Binding classes are used to capture the data from forms.
       To map the form data into java objects we use Binding classes.
	   
Note : If application not generates the data we no need to keep @generatedValue annotaion to entity class field.

Note : @Table annotation is used to give the custom name to table in db.

Note : Foreign Key  between two tables will be represent by @joincoloumn(name="name_of_joincloumn").Joincolumn by default referneces the pk of other tables 
	   
Note: Once the user is logged in successfully enquiry management will start.

Note :Once User Logged into the application, user performance report should be displayed, so we can display the user dashboard by logged user, UserId  	   
        
Note : By seeing mock up screens we develop classes and methods in application.			  

Note : for update alos we use addEnquiry methos because it will update existing enquiry by enquiry id.

Note :We use UPSERT method or approach to Inserting the Record or UPdating the Record

Note : We can do mapping in bi-directional and UniDirectional on Entities.

Note : Always recommended to do Bi-Directional Mapping for Entities.

Note : Cascade Type means what ever the operation we do on parent record that will affect on Child Record.

Note : We can call Binding Classes as DTO classes. 

Note :In real time we are not supposed to Expose Our Enities to Outside or client or User , we DTO or Binding classes to communicate with client and server entities.
      we don't return any entities directly to the as service method return type. 

Note : Binding classes or dto classes are for presentation and controller layer(User requet data and response to client)

Note : Entity classes are for persistance layer(data storing in data base)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BIDNING CLASSES : BINDING CLASSES ARE USED TO TAKE THE DATA FROM THE UI AND SEND THE DATA TO UI.
       BINDING CLASSES ARE CAPTURE THE DATA FROM UI AND SEND THE DATA TO THE UI.
       Binding classes are used to capture the data from the Request and send the response to UI
	   
CONTROLLERS : Controllers are used to handle the requests and responses	
   
ENTITIES: Entity classes are used to map our application java classes to data base tables.

REPOSITORIES : Repositories are used to connect with DataBase tables.

RUNNER : Runner is used to any logic we want to execute for one time that we can implement by runner
       If we want to load the data to the static tables then we use Runner 
	
SERVICE: Service  classes are used to write out BUSINESS LOGIC

UTIL CLASESS : Util classes are used to write helper logic , those classes we can anywhere in project development

-------------------------------------------------------------------------------------------------------------------------------
->Based on requirement we need to identity what methods we have to write in repositories and service layer and controller class.

->When we Implmenting Functionality Always starts from backend part i.e db tables 
 	
-> to save the record in the table we have "save" method which will accept Entity Object to save the records.

->When we are developing project always think from backend to front end

Note : When ever we get requirement we should start analysis and development fro databse side to front end side , first think what are the tables we need and what are the entities we need and repective repositories and do we need to write any custome methods in repo for data manipulation.  

->To store the details in table we use entity.
->For entity we need repository to insert the record

SignUp Functionality:
----------------------
->After sign up get completed  we have to send success message or failure message to the UI

->From UI, sign up data will come and send that in the form of bindingObjct  to controller and controller will send that to repository and respository will send that data to Database.

Note : In spring boot projects we no need to provide versions to dependency because boot automatically identify the versions for dependencies.

Note : Dependecy Injection means Injecting one class object into another class

Note :STRING IS A IMMUTABLE OBJECT WHENEVER WE TRY TO UPDATE  IT , STRING WILL CREATE NEW Object 
      ->IF WE WANT TO CHANGE THE STRING CONTINUESLY WE GO MUTABLE OBJECT ,LIKE STRINGBUFFER OBJECT, FOR  STRING BUFFER OBJECT WE CAN UPDATE THE BUFFER OBJECT N NUBER OF TIMES.

Note : WE can two or more controller methods with same url but diffenece mapping url like post or put or update or get, but can't take controller two or more controller methods with same mapping method like two post methods with same urls	  
     
Note : If any method returns any type , once method return statement excuted , then no logic will be executed 	  

Note : When Requirement comes , starts analysis from data base to front end like analyze db tables and entities and repositorries and serivice classes and utility classes and controllers and binding classes.

Note : Sometimes we get known functionality but small difference in code we have to find that difference and develope the code.

Note : when we wanto to keep the double quotes inside double quotes we use "\"   

->RequestParam: Request Param annotation is used to capture the data from query parameter.

->Always start coding from backend to front end i.e repository to service,and service to service Impl and service Impl to Controller.

Note : Method Parameter is used for input to process the data
       Method Return Type To Send the response to UI.

Note : Whenever the we start development of task we should understand the requirement clearly and write TODO list in method and complete one by one.	   

Note : If method returns more than  two values or responses based on condition we can use "String" as return type, if method return two values then we use "boolean"

Note : we can take one return type for service method and based on that return type in service we can write another return type for controller method return type.

Note : As per the requirement we think and develope the code.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Module : Enquiry Management :
-----------------------------

Enquiry Management functionality depends on Logged in user(Logged in user added enquiries and view enquiries and dashboard and filtering enquiries)

->As it is user specific functionality , our application should remember logged in user detaials.

Note : To remember logged in user details and to make our application stateful application we have to implement Session Management in application

Note : When User Logged in successfully - Session Should be created and User Logged out Session Should be destroyed.
       -> when we loggin one session will be created and user data will be stored by application , when user logged out user data will be destroyed by the application. 


1.DashBoard
2.Add Enquiry
3.View Enquiries
4.Enquiry Filter
5.LogOut

->Where Enquiry Management will , when user logged in successfully then Enquiry management will start. 




Note : Based On the UserId we get the enuiries added by the specific user.

->To implement Enquiry Module we have to User Session Manage the User manage data between requests.

Note :So in user module we have Registration and unlock and login and Forgot pwd functionalities we have, so anyone can signup and unlock and login activities but actually we do session management after user successfully login , then user related works will start then we has to implement the Session Management after User Successfull Login 
     ->After Login Functionalities are specific to User i.e user can add enquiries and view enquiries and user dashboard and Filter Enquiry and LogOut  
	 
Note : We have Two kind of applications 
       1.State Less applications : we can't store manage user session data between diff requests to our application.
	   2.StateFul applications : we can manage or store the user sessiom management between differen requests
	   
	   -> Like above in our application for USER module we didn't apply the session management so we can't store or manage the who sign up and login and unlock and forgot password
-> Now we have to store user data after logged in successfully , so by that user details we fetch user list of enquiries which logged in user added, when user adding enquiries and autmaticaly configurung user id to student enquiry by session management data
   Example : when we loggin to gmail application , we see logged in user specific mails not all the gamil users, so gmail application session management implmented.

Note: In real time we have analyse like to which moudule functionalites session management required that kind of analysis power we should think. 
----------------------------------------------------------------------------------------
HttpSession : http session is a pre defined object in java servlet api.

create session 
---------------
HttpSession.setattribute("userid", user.id);

destroy session :
------------------
Httpsession.invalidate();

Note : By HttpSession object invalidate() method we can destroy the session.

->Through out the application for one user we have one session.

->To display the user dahsboard and add enquiries and view the enquiries of user we should store or capture logged user data by Session Management know logged in 
--------------------------------------------------------------------------------------------------------------   
AJAX:(Asynchronus JavaScript And Xml)
---------------------------------------------------------------------------------------------------------------
->In web application there are two types of requests
  1.Synchronus Requests: When request comes whole web page will be reloaded
                         ->In order to implement Asynchronus request we don't need to do any thing by defalut in web application every request will be a synchronus request
  
  2.ASynchronus Requests: (DOM(Web Page elements will be available as a DOM(Document Object Model ) structure )) will be updated with out reloading the page.
                         ->When we want to reload the some portion of web page not whole web page like some para or div or some dropdown then we go for Asynchornus request.     
                         ->In order to implement Asynchronus request we go for "AJAX". 
                         ->Asynchronus Requests update the some parts of web page.

Note : We can reload the content with out reloading the page by AJAX.

Note : Some portion or dom of web page will be reload with out reloading the whole web page in Async request.

->To Send Asynchronus Requests To Server We Use AJAX.
->We can reload only data without reloading whole web page.
-> We can send data to server in Asynch mode(without clicking on any button).

Note : By Ajax call end user may feel that keep on getting modified data on front end itself but actually we keep sending the requests to server and takes the data as per user given.

Note :When we are learning new concepts , we don't directly apply that on project, first practice it and then implement it on project itself

->@RequestParam annotation is used to capture the data from request.

->When we want to return UI , we use @controller annotation for classes, if we want to return just as text message then we use @controller + @ResponseBody , so @controller + ReponsseBody =@RestController.

->To send the requests to servers asynchronusly then we use AJAX.

->To Implement Asynchronus request Then we use AJAX in our project.

->To Implement Synchronus Request we no need to use anything by default every request Synchronus request.

->By Ajax we can update the web page without reloading web page.

Implement Ajax In Spring Boot:
------------------------------
->Add Jquery Dependecy in pom.xml
        <dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.4</version>
		</dependency>

->Include jquery.min.js file in our html page in between the <head><head/> tag
<script src="/webjars/jquery/3.6.4/jquery.min.js"></script>

->Write ajax logic to send async request to server
->Update the response in web page without reloadig the web page.

Note : By Ajax we can get the response from server with out reloading page.
       we send Async request to server.
Example: 
	   
	   <script>
       $(document).ready(function(){
    	   
    	   $("#dropdown").on("change",function(e)   {
               $.ajax({
               	type : "GET",
               	url : "/dropmsg",
               	data : {
               		cname : $("#cname").val()
               	},
               	success : function(result){
               		$("#drop").html(result)
               	}
               });
   			    		   
   	   });
	   
	   });

 
      <script>

Note : $(document).ready(function(){});
       ->whihc means when whole web page(documnet)is loaded then call this script function tp execute Ajax Call  

Note : when controller method is executed it should return view name otherwise it will throw exception.
       if we want to return controller method text or any formatted data then we should annotatate trhat method as @responsebody.
	   
-> we can filter the data by QueryByExample which means based on condition we filter the data by passing entity for that entity we set the data based on thta we get the data.	

->Stream is used to process the data and if we want to filter the data then we go for filter method in stream object.
-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------
Note : When we working on real time project we shoudln't return String Literals as return type for methods.

->We should not hardcode String Literals In our application.

-> So in order to deal with String Literals in application, we implements "APP CONSTANTS"
   App Constants can be implement in Interfaces or Classes or Enum based on project requirement Developers will use any type to implement app constants.

Note : We should follow Naming Conventions for AppConstants class Variables
       ->if varible as static final we should take '_'and Uppercase for varibles names like "public Static final APP_PWD="Naresh09090" ";

->Wher ever we writing String Literala in project we should take AppConstants instead of that.

->Where ever the String Literal is available take it from AppConstants

->Give meaningful name to varibles while declaring it on AppConstants.

->If we declare A varible as Private We unable to access it on outside of class. If we declare a variable as public it can be access outside of a class.

Note : Where Ever We see String Literals are available we declare Constants for that.

Note : for url patterns or restcontroller methods url we don't declare AppConstants.

Note : What ever String Literals we see in project , we declare it on constant class and use it from appconstants class and use it projct where ever we want.

Note : The main reason to avoid Strting Literals becuase they are hard coded and by app constants we made our code more readable and maintainble.
	   
   	   
	   
	   






   
	   
	   
	   
	 













	   
	   
	   
	   
	   
    	   
	


  


